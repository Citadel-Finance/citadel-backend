name: Node-CI

on:
  push:
    branches: [pre-develop]

jobs:
  build:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[update]')"

    steps:
      - name: Copy code files to container
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Environment preparation
        run: |
          mkdir -p ~/.ssh/
          touch ~/.ssh/id_rsa
          chmod -R go= ~/.ssh
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.SERVER_SSH_KEY }}" >> ~/.ssh/id_rsa

      - name: Install npm dependencies
        run: npm install

      - name: Run build task
        run: npm run build

  deploy-develop:
    if: github.ref == 'refs/heads/pre-develop' && contains(github.event.head_commit.message, '[update]')
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Copy code files to container
        uses: actions/checkout@v2

      - name: Environment preparation
        run: |
          mkdir -p ~/.ssh/
          touch ~/.ssh/id_rsa
          chmod -R go= ~/.ssh
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.SERVER_SSH_KEY }}" >> ~/.ssh/id_rsa
          sudo apt-add-repository -y -u ppa:ansible/ansible
          sudo apt-get install -y rsync
          sudo apt-get install -y ansible

      - name: Deploy to Server
        run: |
          chmod 700 ci-scripts
          cd ci-scripts
          ansible-playbook -i "${{ secrets.REMOTE_HOST }}" -e "ansible_user=${{ secrets.REMOTE_USER }} \
            DB_LINK=${{ secrets.DB_LINK }} \
            INFURA=${{ secrets.INFURA_TESTNET }} \
            JWT_ACCESS_SECRET=${{ secrets.DEVELOP_JWT_ACCESS_SECRET }} \
            JWT_REFRESH_SECRET=${{ secrets.DEVELOP_JWT_REFRESH_SECRET }} \
            SERVER_HOST=${{ secrets.SERVER_HOST }} \
            SERVER_PORT=${{ secrets.SERVER_PORT }} \
            SERVER_SHUTDOWN_TIMEOUT=${{ secrets.SERVER_SHUTDOWN_TIMEOUT }} \
            API_KEY=${{ secrets.API_KEY }} \
            LOCAL=${{ secrets.LOCAL }} \
            ADDRESS_FACTORY=${{ secrets.ADDRESS_FACTORY }} \
            IS_MAINNET=${{ secrets.IS_MAINNET }} \
            SRC_DIR=${{ github.workspace }}/" backend-update.yml;

#deploy-master:
#  if: github.ref == 'refs/heads/master' && contains(github.event.head_commit.message, '[update]')
#  runs-on: ubuntu-latest
#  needs: [build]
#
#  steps:
#    - name: Copy code files to container
#      uses: actions/checkout@v2
#
#    - name: Environment preparation
#      run: |
#        mkdir -p ~/.ssh/
#        touch ~/.ssh/id_rsa
#        chmod -R go= ~/.ssh
#        chmod 600 ~/.ssh/id_rsa
#        echo "${{ secrets.PROD_SERVER_SSH_KEY }}" >> ~/.ssh/id_rsa
#        sudo apt-add-repository -y -u ppa:ansible/ansible
#        sudo apt-get install -y rsync
#        sudo apt-get install -y ansible
#
#    - name: Deploy to Server
#      run: |
#        chmod 700 ci-scripts
#        cd ci-scripts
#        ansible-playbook -i "${{ secrets.PROD_REMOTE_HOST }}" -e "ansible_user=${{ secrets.PROD_REMOTE_USER }} \
#          DB_LINK=${{ secrets.PROD_DB_LINK }} \
#          JWT_ACCESS_SECRET=${{ secrets.PROD_JWT_ACCESS_SECRET }} \
#          JWT_REFRESH_SECRET=${{ secrets.PROD_JWT_REFRESH_SECRET }} \
#          SERVER_HOST=${{ secrets.PROD_SERVER_HOST }} \
#          SERVER_PORT=${{ secrets.PROD_SERVER_PORT }} \
#          SRC_DIR=${{ github.workspace }}/" backend-update.yml;
#
